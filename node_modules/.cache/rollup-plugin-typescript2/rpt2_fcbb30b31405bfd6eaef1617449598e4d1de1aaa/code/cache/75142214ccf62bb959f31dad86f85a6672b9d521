{"code":"import { addObserver, globalState, isComputedValue, removeObserver } from \"../internal\";\r\nexport var IDerivationState_;\r\n(function (IDerivationState_) {\r\n    // before being run or (outside batch and not being observed)\r\n    // at this point derivation is not holding any data about dependency tree\r\n    IDerivationState_[IDerivationState_[\"NOT_TRACKING_\"] = -1] = \"NOT_TRACKING_\";\r\n    // no shallow dependency changed since last computation\r\n    // won't recalculate derivation\r\n    // this is what makes mobx fast\r\n    IDerivationState_[IDerivationState_[\"UP_TO_DATE_\"] = 0] = \"UP_TO_DATE_\";\r\n    // some deep dependency changed, but don't know if shallow dependency changed\r\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\r\n    // currently only ComputedValue will propagate POSSIBLY_STALE\r\n    //\r\n    // having this state is second big optimization:\r\n    // don't have to recompute on every dependency change, but only when it's needed\r\n    IDerivationState_[IDerivationState_[\"POSSIBLY_STALE_\"] = 1] = \"POSSIBLY_STALE_\";\r\n    // A shallow dependency has changed since last computation and the derivation\r\n    // will need to recompute when it's needed next.\r\n    IDerivationState_[IDerivationState_[\"STALE_\"] = 2] = \"STALE_\";\r\n})(IDerivationState_ || (IDerivationState_ = {}));\r\nexport var TraceMode;\r\n(function (TraceMode) {\r\n    TraceMode[TraceMode[\"NONE\"] = 0] = \"NONE\";\r\n    TraceMode[TraceMode[\"LOG\"] = 1] = \"LOG\";\r\n    TraceMode[TraceMode[\"BREAK\"] = 2] = \"BREAK\";\r\n})(TraceMode || (TraceMode = {}));\r\nexport class CaughtException {\r\n    cause;\r\n    constructor(cause) {\r\n        this.cause = cause;\r\n        // Empty\r\n    }\r\n}\r\nexport function isCaughtException(e) {\r\n    return e instanceof CaughtException;\r\n}\r\n/**\r\n * Finds out whether any dependency of the derivation has actually changed.\r\n * If dependenciesState is 1 then it will recalculate dependencies,\r\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n *\r\n * By iterating over the dependencies in the same order that they were reported and\r\n * stopping on the first change, all the recalculations are only called for ComputedValues\r\n * that will be tracked by derivation. That is because we assume that if the first x\r\n * dependencies of the derivation doesn't change then the derivation should run the same way\r\n * up until accessing x-th dependency.\r\n */\r\nexport function shouldCompute(derivation) {\r\n    switch (derivation.dependenciesState_) {\r\n        case IDerivationState_.UP_TO_DATE_:\r\n            return false;\r\n        case IDerivationState_.NOT_TRACKING_:\r\n        case IDerivationState_.STALE_:\r\n            return true;\r\n        case IDerivationState_.POSSIBLY_STALE_: {\r\n            // state propagation can occur outside of action/reactive context #2195\r\n            const prevAllowStateReads = allowStateReadsStart(true);\r\n            const prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\r\n            const obs = derivation.observing_, l = obs.length;\r\n            for (let i = 0; i < l; i++) {\r\n                const obj = obs[i];\r\n                if (isComputedValue(obj)) {\r\n                    if (globalState.disableErrorBoundaries) {\r\n                        obj.get();\r\n                    }\r\n                    else {\r\n                        try {\r\n                            obj.get();\r\n                        }\r\n                        catch (e) {\r\n                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all\r\n                            untrackedEnd(prevUntracked);\r\n                            allowStateReadsEnd(prevAllowStateReads);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\r\n                    // and `derivation` is an observer of `obj`\r\n                    // invariantShouldCompute(derivation)\r\n                    if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\r\n                        untrackedEnd(prevUntracked);\r\n                        allowStateReadsEnd(prevAllowStateReads);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            changeDependenciesStateTo0(derivation);\r\n            untrackedEnd(prevUntracked);\r\n            allowStateReadsEnd(prevAllowStateReads);\r\n            return false;\r\n        }\r\n    }\r\n}\r\nexport function isComputingDerivation() {\r\n    return globalState.trackingDerivation !== null; // filter out actions inside computations\r\n}\r\nexport function checkIfStateModificationsAreAllowed(atom) {\r\n    if (!__DEV__) {\r\n        return;\r\n    }\r\n    const hasObservers = atom.observers_.size > 0;\r\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\r\n    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === \"always\"))\r\n        console.warn(\"[MobX] \" +\r\n            (globalState.enforceActions\r\n                ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \"\r\n                : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") +\r\n            atom.name_);\r\n}\r\nexport function checkIfStateReadsAreAllowed(observable) {\r\n    if (__DEV__ && !globalState.allowStateReads && globalState.observableRequiresReaction) {\r\n        console.warn(`[mobx] Observable ${observable.name_} being read outside a reactive context`);\r\n    }\r\n}\r\n/**\r\n * Executes the provided function `f` and tracks which observables are being accessed.\r\n * The tracking information is stored on the `derivation` object and the derivation is registered\r\n * as observer of any of the accessed observables.\r\n */\r\nexport function trackDerivedFunction(derivation, f, context) {\r\n    const prevAllowStateReads = allowStateReadsStart(true);\r\n    // pre allocate array allocation + room for variation in deps\r\n    // array will be trimmed by bindDependencies\r\n    changeDependenciesStateTo0(derivation);\r\n    derivation.newObserving_ = new Array(derivation.observing_.length + 100);\r\n    derivation.unboundDepsCount_ = 0;\r\n    derivation.runId_ = ++globalState.runId;\r\n    const prevTracking = globalState.trackingDerivation;\r\n    globalState.trackingDerivation = derivation;\r\n    globalState.inBatch++;\r\n    let result;\r\n    if (globalState.disableErrorBoundaries === true) {\r\n        result = f.call(context);\r\n    }\r\n    else {\r\n        try {\r\n            result = f.call(context);\r\n        }\r\n        catch (e) {\r\n            result = new CaughtException(e);\r\n        }\r\n    }\r\n    globalState.inBatch--;\r\n    globalState.trackingDerivation = prevTracking;\r\n    bindDependencies(derivation);\r\n    warnAboutDerivationWithoutDependencies(derivation);\r\n    allowStateReadsEnd(prevAllowStateReads);\r\n    return result;\r\n}\r\nfunction warnAboutDerivationWithoutDependencies(derivation) {\r\n    if (!__DEV__)\r\n        return;\r\n    if (derivation.observing_.length !== 0)\r\n        return;\r\n    if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {\r\n        console.warn(`[mobx] Derivation ${derivation.name_} is created/updated without reading any observable value`);\r\n    }\r\n}\r\n/**\r\n * diffs newObserving with observing.\r\n * update observing to be newObserving with unique observables\r\n * notify observers that become observed/unobserved\r\n */\r\nfunction bindDependencies(derivation) {\r\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\r\n    const prevObserving = derivation.observing_;\r\n    const observing = (derivation.observing_ = derivation.newObserving_);\r\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;\r\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\r\n    //   0: first occurrence, change to 1 and keep it\r\n    //   1: extra occurrence, drop it\r\n    let i0 = 0, l = derivation.unboundDepsCount_;\r\n    for (let i = 0; i < l; i++) {\r\n        const dep = observing[i];\r\n        if (dep.diffValue_ === 0) {\r\n            dep.diffValue_ = 1;\r\n            if (i0 !== i)\r\n                observing[i0] = dep;\r\n            i0++;\r\n        }\r\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\r\n        // not hitting the condition\r\n        if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\r\n            lowestNewObservingDerivationState = dep.dependenciesState_;\r\n        }\r\n    }\r\n    observing.length = i0;\r\n    derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\r\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\r\n    //   0: it's not in new observables, unobserve it\r\n    //   1: it keeps being observed, don't want to notify it. change to 0\r\n    l = prevObserving.length;\r\n    while (l--) {\r\n        const dep = prevObserving[l];\r\n        if (dep.diffValue_ === 0) {\r\n            removeObserver(dep, derivation);\r\n        }\r\n        dep.diffValue_ = 0;\r\n    }\r\n    // Go through all new observables and check diffValue: (now it should be unique)\r\n    //   0: it was set to 0 in last loop. don't need to do anything.\r\n    //   1: it wasn't observed, let's observe it. set back to 0\r\n    while (i0--) {\r\n        const dep = observing[i0];\r\n        if (dep.diffValue_ === 1) {\r\n            dep.diffValue_ = 0;\r\n            addObserver(dep, derivation);\r\n        }\r\n    }\r\n    // Some new observed derivations may become stale during this derivation computation\r\n    // so they have had no chance to propagate staleness (#916)\r\n    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\r\n        derivation.dependenciesState_ = lowestNewObservingDerivationState;\r\n        derivation.onBecomeStale_();\r\n    }\r\n}\r\nexport function clearObserving(derivation) {\r\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\r\n    const obs = derivation.observing_;\r\n    derivation.observing_ = [];\r\n    let i = obs.length;\r\n    while (i--)\r\n        removeObserver(obs[i], derivation);\r\n    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\r\n}\r\nexport function untracked(action) {\r\n    const prev = untrackedStart();\r\n    try {\r\n        return action();\r\n    }\r\n    finally {\r\n        untrackedEnd(prev);\r\n    }\r\n}\r\nexport function untrackedStart() {\r\n    const prev = globalState.trackingDerivation;\r\n    globalState.trackingDerivation = null;\r\n    return prev;\r\n}\r\nexport function untrackedEnd(prev) {\r\n    globalState.trackingDerivation = prev;\r\n}\r\nexport function allowStateReadsStart(allowStateReads) {\r\n    const prev = globalState.allowStateReads;\r\n    globalState.allowStateReads = allowStateReads;\r\n    return prev;\r\n}\r\nexport function allowStateReadsEnd(prev) {\r\n    globalState.allowStateReads = prev;\r\n}\r\n/**\r\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n *\r\n */\r\nexport function changeDependenciesStateTo0(derivation) {\r\n    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_)\r\n        return;\r\n    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\r\n    const obs = derivation.observing_;\r\n    let i = obs.length;\r\n    while (i--)\r\n        obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\r\n}\r\n//# sourceMappingURL=derivation.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"derivation.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/core/derivation.ts\"],\"names\":[],\"mappings\":\"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\"}"}

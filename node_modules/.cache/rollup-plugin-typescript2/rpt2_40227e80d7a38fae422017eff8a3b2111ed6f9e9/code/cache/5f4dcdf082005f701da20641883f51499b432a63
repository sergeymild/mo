{"code":"import { getAdministration, isObservableArray, isObservableMap, isObservableObject, isObservableValue, die, isStringish } from \"../internal\";\r\nexport function interceptReads(thing, propOrHandler, handler) {\r\n    let target;\r\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\r\n        target = getAdministration(thing);\r\n    }\r\n    else if (isObservableObject(thing)) {\r\n        if (__DEV__ && !isStringish(propOrHandler))\r\n            return die(`InterceptReads can only be used with a specific property, not with an object in general`);\r\n        target = getAdministration(thing, propOrHandler);\r\n    }\r\n    else if (__DEV__) {\r\n        return die(`Expected observable map, object or array as first array`);\r\n    }\r\n    if (__DEV__ && target.dehancer !== undefined)\r\n        return die(`An intercept reader was already established`);\r\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler;\r\n    return () => {\r\n        target.dehancer = undefined;\r\n    };\r\n}\r\n//# sourceMappingURL=intercept-read.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"intercept-read.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api/intercept-read.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAKH,iBAAiB,EACjB,iBAAiB,EACjB,eAAe,EACf,kBAAkB,EAClB,iBAAiB,EAEjB,GAAG,EACH,WAAW,EACd,MAAM,aAAa,CAAA;AAuBpB,MAAM,UAAU,cAAc,CAAC,KAAK,EAAE,aAAc,EAAE,OAAQ;IAC1D,IAAI,MAAM,CAAA;IACV,IAAI,eAAe,CAAC,KAAK,CAAC,IAAI,iBAAiB,CAAC,KAAK,CAAC,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;QAChF,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAA;KACpC;SAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;QAClC,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;YACtC,OAAO,GAAG,CACN,yFAAyF,CAC5F,CAAA;QACL,MAAM,GAAG,iBAAiB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAA;KACnD;SAAM,IAAI,OAAO,EAAE;QAChB,OAAO,GAAG,CAAC,yDAAyD,CAAC,CAAA;KACxE;IACD,IAAI,OAAO,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS;QACxC,OAAO,GAAG,CAAC,6CAA6C,CAAC,CAAA;IAC7D,MAAM,CAAC,QAAQ,GAAG,OAAO,aAAa,KAAK,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAA;IAC/E,OAAO,GAAG,EAAE;QACR,MAAM,CAAC,QAAQ,GAAG,SAAS,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/api/intercept-read.d.ts","writeByteOrderMark":false,"text":"import { IObservableArray, IObservableValue, Lambda, ObservableMap, ObservableSet } from \"../internal\";\r\nexport declare type ReadInterceptor<T> = (value: any) => T;\r\n/** Experimental feature right now, tested indirectly via Mobx-State-Tree */\r\nexport declare function interceptReads<T>(value: IObservableValue<T>, handler: ReadInterceptor<T>): Lambda;\r\nexport declare function interceptReads<T>(observableArray: IObservableArray<T>, handler: ReadInterceptor<T>): Lambda;\r\nexport declare function interceptReads<K, V>(observableMap: ObservableMap<K, V>, handler: ReadInterceptor<V>): Lambda;\r\nexport declare function interceptReads<V>(observableSet: ObservableSet<V>, handler: ReadInterceptor<V>): Lambda;\r\nexport declare function interceptReads(object: Object, property: string, handler: ReadInterceptor<any>): Lambda;\r\n"}}

{"code":"import { isObservableMap, startBatch, endBatch, asObservableObject, isPlainObject, isObservable, die, getOwnPropertyDescriptors, $mobx, ownKeys } from \"../internal\";\r\nexport function extendObservable(target, properties, annotations, options) {\r\n    if (__DEV__) {\r\n        if (arguments.length > 4)\r\n            die(\"'extendObservable' expected 2-4 arguments\");\r\n        if (typeof target !== \"object\")\r\n            die(\"'extendObservable' expects an object as first argument\");\r\n        if (isObservableMap(target))\r\n            die(\"'extendObservable' should not be used on maps, use map.merge instead\");\r\n        if (!isPlainObject(properties))\r\n            die(`'extendObservabe' only accepts plain objects as second argument`);\r\n        if (isObservable(properties) || isObservable(annotations))\r\n            die(`Extending an object with another observable (object) is not supported`);\r\n    }\r\n    // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\r\n    const descriptors = getOwnPropertyDescriptors(properties);\r\n    const adm = asObservableObject(target, options)[$mobx];\r\n    startBatch();\r\n    try {\r\n        ownKeys(descriptors).forEach(key => {\r\n            adm.extend_(key, descriptors[key], \r\n            // must pass \"undefined\" for { key: undefined }\r\n            !annotations ? true : key in annotations ? annotations[key] : true);\r\n        });\r\n    }\r\n    finally {\r\n        endBatch();\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=extendobservable.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"extendobservable.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api/extendobservable.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAEH,eAAe,EAEf,UAAU,EACV,QAAQ,EACR,kBAAkB,EAClB,aAAa,EAEb,YAAY,EACZ,GAAG,EACH,yBAAyB,EACzB,KAAK,EACL,OAAO,EACV,MAAM,aAAa,CAAA;AAEpB,MAAM,UAAU,gBAAgB,CAC5B,MAAS,EACT,UAAa,EACb,WAAsC,EACtC,OAAiC;IAEjC,IAAI,OAAO,EAAE;QACT,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;YAAE,GAAG,CAAC,2CAA2C,CAAC,CAAA;QAC1E,IAAI,OAAO,MAAM,KAAK,QAAQ;YAC1B,GAAG,CAAC,wDAAwD,CAAC,CAAA;QACjE,IAAI,eAAe,CAAC,MAAM,CAAC;YACvB,GAAG,CAAC,sEAAsE,CAAC,CAAA;QAC/E,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;YAC1B,GAAG,CAAC,iEAAiE,CAAC,CAAA;QAC1E,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,WAAW,CAAC;YACrD,GAAG,CAAC,uEAAuE,CAAC,CAAA;KACnF;IACD,8FAA8F;IAC9F,MAAM,WAAW,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAA;IAEzD,MAAM,GAAG,GAAmC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAA;IACtF,UAAU,EAAE,CAAA;IACZ,IAAI;QACA,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/B,GAAG,CAAC,OAAO,CACP,GAAG,EACH,WAAW,CAAC,GAAU,CAAC;YACvB,+CAA+C;YAC/C,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CACrE,CAAA;QACL,CAAC,CAAC,CAAA;KACL;YAAS;QACN,QAAQ,EAAE,CAAA;KACb;IACD,OAAO,MAAa,CAAA;AACxB,CAAC\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/api/extendobservable.d.ts","writeByteOrderMark":false,"text":"import { CreateObservableOptions, AnnotationsMap } from \"../internal\";\r\nexport declare function extendObservable<A extends Object, B extends Object>(target: A, properties: B, annotations?: AnnotationsMap<B, never>, options?: CreateObservableOptions): A & B;\r\n"}}

{"code":"import { globalState, isolateGlobalState, setReactionScheduler } from \"../internal\";\r\nconst NEVER = \"never\";\r\nconst ALWAYS = \"always\";\r\nconst OBSERVED = \"observed\";\r\n// const IF_AVAILABLE = \"ifavailable\"\r\nexport function configure(options) {\r\n    if (options.isolateGlobalState === true) {\r\n        isolateGlobalState();\r\n    }\r\n    const { useProxies, enforceActions } = options;\r\n    if (useProxies !== undefined) {\r\n        globalState.useProxies =\r\n            useProxies === ALWAYS\r\n                ? true\r\n                : useProxies === NEVER\r\n                    ? false\r\n                    : typeof Proxy !== \"undefined\";\r\n    }\r\n    if (useProxies === \"ifavailable\")\r\n        globalState.verifyProxies = true;\r\n    if (enforceActions !== undefined) {\r\n        const ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\r\n        globalState.enforceActions = ea;\r\n        globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\r\n    }\r\n    ;\r\n    [\r\n        \"computedRequiresReaction\",\r\n        \"reactionRequiresObservable\",\r\n        \"observableRequiresReaction\",\r\n        \"disableErrorBoundaries\",\r\n        \"safeDescriptors\"\r\n    ].forEach(key => {\r\n        if (key in options)\r\n            globalState[key] = !!options[key];\r\n    });\r\n    globalState.allowStateReads = !globalState.observableRequiresReaction;\r\n    if (__DEV__ && globalState.disableErrorBoundaries === true) {\r\n        console.warn(\"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\");\r\n    }\r\n    if (options.reactionScheduler) {\r\n        setReactionScheduler(options.reactionScheduler);\r\n    }\r\n}\r\n//# sourceMappingURL=configure.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"configure.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api/configure.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,aAAa,CAAA;AAEnF,MAAM,KAAK,GAAG,OAAO,CAAA;AACrB,MAAM,MAAM,GAAG,QAAQ,CAAA;AACvB,MAAM,QAAQ,GAAG,UAAU,CAAA;AAC3B,qCAAqC;AAErC,MAAM,UAAU,SAAS,CAAC,OAgBzB;IACG,IAAI,OAAO,CAAC,kBAAkB,KAAK,IAAI,EAAE;QACrC,kBAAkB,EAAE,CAAA;KACvB;IACD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,OAAO,CAAA;IAC9C,IAAI,UAAU,KAAK,SAAS,EAAE;QAC1B,WAAW,CAAC,UAAU;YAClB,UAAU,KAAK,MAAM;gBACjB,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,UAAU,KAAK,KAAK;oBACtB,CAAC,CAAC,KAAK;oBACP,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW,CAAA;KACzC;IACD,IAAI,UAAU,KAAK,aAAa;QAAE,WAAW,CAAC,aAAa,GAAG,IAAI,CAAA;IAClE,IAAI,cAAc,KAAK,SAAS,EAAE;QAC9B,MAAM,EAAE,GAAG,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,KAAK,QAAQ,CAAA;QAC3E,WAAW,CAAC,cAAc,GAAG,EAAE,CAAA;QAC/B,WAAW,CAAC,iBAAiB,GAAG,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA;KAC9E;IACD,CAAC;IAAA;QACG,0BAA0B;QAC1B,4BAA4B;QAC5B,4BAA4B;QAC5B,wBAAwB;QACxB,iBAAiB;KACpB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACZ,IAAI,GAAG,IAAI,OAAO;YAAE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IACzD,CAAC,CAAC,CAAA;IACF,WAAW,CAAC,eAAe,GAAG,CAAC,WAAW,CAAC,0BAA0B,CAAA;IACrE,IAAI,OAAO,IAAI,WAAW,CAAC,sBAAsB,KAAK,IAAI,EAAE;QACxD,OAAO,CAAC,IAAI,CACR,0GAA0G,CAC7G,CAAA;KACJ;IACD,IAAI,OAAO,CAAC,iBAAiB,EAAE;QAC3B,oBAAoB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;KAClD;AACL,CAAC\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/api/configure.d.ts","writeByteOrderMark":false,"text":"export declare function configure(options: {\r\n    enforceActions?: \"never\" | \"always\" | \"observed\";\r\n    computedRequiresReaction?: boolean;\r\n    /**\r\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\r\n     */\r\n    reactionRequiresObservable?: boolean;\r\n    /**\r\n     * Warn if observables are accessed outside a reactive context\r\n     */\r\n    observableRequiresReaction?: boolean;\r\n    isolateGlobalState?: boolean;\r\n    disableErrorBoundaries?: boolean;\r\n    safeDescriptors?: boolean;\r\n    reactionScheduler?: (f: () => void) => void;\r\n    useProxies?: \"always\" | \"never\" | \"ifavailable\";\r\n}): void;\r\n"}}

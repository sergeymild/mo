{"code":"import { getAdministration, isFunction } from \"../internal\";\r\nexport function observe(thing, propOrCb, cbOrFire, fireImmediately) {\r\n    if (isFunction(cbOrFire))\r\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);\r\n    else\r\n        return observeObservable(thing, propOrCb, cbOrFire);\r\n}\r\nfunction observeObservable(thing, listener, fireImmediately) {\r\n    return getAdministration(thing).observe_(listener, fireImmediately);\r\n}\r\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\r\n    return getAdministration(thing, property).observe_(listener, fireImmediately);\r\n}\r\n//# sourceMappingURL=observe.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"observe.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api/observe.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAUH,iBAAiB,EAGjB,UAAU,EACb,MAAM,aAAa,CAAA;AAuCpB,MAAM,UAAU,OAAO,CAAC,KAAK,EAAE,QAAS,EAAE,QAAS,EAAE,eAAgB;IACjE,IAAI,UAAU,CAAC,QAAQ,CAAC;QACpB,OAAO,yBAAyB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAA;;QAC3E,OAAO,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;AAC5D,CAAC;AAED,SAAS,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,eAAwB;IAChE,OAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;AACvE,CAAC;AAED,SAAS,yBAAyB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,eAAwB;IAClF,OAAO,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;AACjF,CAAC\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/api/observe.d.ts","writeByteOrderMark":false,"text":"import { IArrayDidChange, IComputedValue, IMapDidChange, IObjectDidChange, IObservableArray, IObservableValue, IValueDidChange, Lambda, ObservableMap, ObservableSet, ISetDidChange } from \"../internal\";\r\nexport declare function observe<T>(value: IObservableValue<T> | IComputedValue<T>, listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe<T>(observableArray: IObservableArray<T>, listener: (change: IArrayDidChange<T>) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe<V>(observableMap: ObservableSet<V>, listener: (change: ISetDidChange<V>) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe<K, V>(observableMap: ObservableMap<K, V>, listener: (change: IMapDidChange<K, V>) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe<K, V>(observableMap: ObservableMap<K, V>, property: K, listener: (change: IValueDidChange<V>) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe(object: Object, listener: (change: IObjectDidChange) => void, fireImmediately?: boolean): Lambda;\r\nexport declare function observe<T, K extends keyof T>(object: T, property: K, listener: (change: IValueDidChange<T[K]>) => void, fireImmediately?: boolean): Lambda;\r\n"}}

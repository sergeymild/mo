{"code":"const niceErrors = {\r\n    0: `Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'`,\r\n    1(annotationType, key) {\r\n        return `Cannot apply '${annotationType}' to '${key.toString()}': Field not found.`;\r\n    },\r\n    5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\r\n    6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\r\n    7: \"'entries()' can only be used on observable objects, arrays and maps\",\r\n    8: \"'set()' can only be used on observable objects, arrays and maps\",\r\n    9: \"'remove()' can only be used on observable objects, arrays and maps\",\r\n    10: \"'has()' can only be used on observable objects, arrays and maps\",\r\n    11: \"'get()' can only be used on observable objects, arrays and maps\",\r\n    12: `Invalid annotation`,\r\n    13: `Dynamic observable objects cannot be frozen`,\r\n    14: \"Intercept handlers should return nothing or a change object\",\r\n    15: `Observable arrays cannot be frozen`,\r\n    16: `Modification exception: the internal structure of an observable array was changed.`,\r\n    17(index, length) {\r\n        return `[mobx.array] Index out of bounds, ${index} is larger than ${length}`;\r\n    },\r\n    18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\r\n    19(other) {\r\n        return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name;\r\n    },\r\n    20(other) {\r\n        return \"Cannot initialize map from \" + other;\r\n    },\r\n    21(dataStructure) {\r\n        return `Cannot convert to map from '${dataStructure}'`;\r\n    },\r\n    22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\r\n    23: \"It is not possible to get index atoms from arrays\",\r\n    24(thing) {\r\n        return \"Cannot obtain administration from \" + thing;\r\n    },\r\n    25(property, name) {\r\n        return `the entry '${property}' does not exist in the observable map '${name}'`;\r\n    },\r\n    26: \"please specify a property\",\r\n    27(property, name) {\r\n        return `no observable property '${property.toString()}' found on the observable object '${name}'`;\r\n    },\r\n    28(thing) {\r\n        return \"Cannot obtain atom from \" + thing;\r\n    },\r\n    29: \"Expecting some object\",\r\n    30: \"invalid action stack. did you forget to finish an action?\",\r\n    31: \"missing option for computed: get\",\r\n    32(name, derivation) {\r\n        return `Cycle detected in computation ${name}: ${derivation}`;\r\n    },\r\n    33(name) {\r\n        return `The setter of computed value '${name}' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?`;\r\n    },\r\n    34(name) {\r\n        return `[ComputedValue '${name}'] It is not possible to assign a new value to a computed value.`;\r\n    },\r\n    35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\r\n    36: \"isolateGlobalState should be called before MobX is running any reactions\",\r\n    37(method) {\r\n        return `[mobx] \\`observableArray.${method}()\\` mutates the array in-place, which is not allowed inside a derivation. Use \\`array.slice().${method}()\\` instead`;\r\n    }\r\n};\r\nconst errors = __DEV__ ? niceErrors : {};\r\nexport function die(error, ...args) {\r\n    if (__DEV__) {\r\n        let e = typeof error === \"string\" ? error : errors[error];\r\n        if (typeof e === \"function\")\r\n            e = e.apply(null, args);\r\n        throw new Error(`[MobX] ${e}`);\r\n    }\r\n    throw new Error(typeof error === \"number\"\r\n        ? `[MobX] minified error nr: ${error}${args.length ? \" \" + args.map(String).join(\",\") : \"\"}. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts`\r\n        : `[MobX] ${error}`);\r\n}\r\n//# sourceMappingURL=errors.js.map","references":[],"map":"{\"version\":3,\"file\":\"errors.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/errors.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/errors.d.ts","writeByteOrderMark":false,"text":"declare const niceErrors: {\r\n    readonly 0: \"Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'\";\r\n    readonly 1: (annotationType: any, key: PropertyKey) => string;\r\n    readonly 5: \"'keys()' can only be used on observable objects, arrays, sets and maps\";\r\n    readonly 6: \"'values()' can only be used on observable objects, arrays, sets and maps\";\r\n    readonly 7: \"'entries()' can only be used on observable objects, arrays and maps\";\r\n    readonly 8: \"'set()' can only be used on observable objects, arrays and maps\";\r\n    readonly 9: \"'remove()' can only be used on observable objects, arrays and maps\";\r\n    readonly 10: \"'has()' can only be used on observable objects, arrays and maps\";\r\n    readonly 11: \"'get()' can only be used on observable objects, arrays and maps\";\r\n    readonly 12: \"Invalid annotation\";\r\n    readonly 13: \"Dynamic observable objects cannot be frozen\";\r\n    readonly 14: \"Intercept handlers should return nothing or a change object\";\r\n    readonly 15: \"Observable arrays cannot be frozen\";\r\n    readonly 16: \"Modification exception: the internal structure of an observable array was changed.\";\r\n    readonly 17: (index: any, length: any) => string;\r\n    readonly 18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\";\r\n    readonly 19: (other: any) => string;\r\n    readonly 20: (other: any) => string;\r\n    readonly 21: (dataStructure: any) => string;\r\n    readonly 22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\";\r\n    readonly 23: \"It is not possible to get index atoms from arrays\";\r\n    readonly 24: (thing: any) => string;\r\n    readonly 25: (property: any, name: any) => string;\r\n    readonly 26: \"please specify a property\";\r\n    readonly 27: (property: any, name: any) => string;\r\n    readonly 28: (thing: any) => string;\r\n    readonly 29: \"Expecting some object\";\r\n    readonly 30: \"invalid action stack. did you forget to finish an action?\";\r\n    readonly 31: \"missing option for computed: get\";\r\n    readonly 32: (name: any, derivation: any) => string;\r\n    readonly 33: (name: any) => string;\r\n    readonly 34: (name: any) => string;\r\n    readonly 35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\";\r\n    readonly 36: \"isolateGlobalState should be called before MobX is running any reactions\";\r\n    readonly 37: (method: any) => string;\r\n};\r\ndeclare const errors: typeof niceErrors;\r\nexport declare function die(error: string | keyof typeof errors, ...args: any[]): never;\r\nexport {};\r\n"}}

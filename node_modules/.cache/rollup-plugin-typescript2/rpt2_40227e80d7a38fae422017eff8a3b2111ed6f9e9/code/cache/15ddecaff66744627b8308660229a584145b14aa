{"code":"import { $mobx, endBatch, isObservableArray, isObservableMap, isObservableSet, isObservableObject, startBatch, die } from \"../internal\";\r\nexport function keys(obj) {\r\n    if (isObservableObject(obj)) {\r\n        return obj[$mobx].keys_();\r\n    }\r\n    if (isObservableMap(obj) || isObservableSet(obj)) {\r\n        return Array.from(obj.keys());\r\n    }\r\n    if (isObservableArray(obj)) {\r\n        return obj.map((_, index) => index);\r\n    }\r\n    die(5);\r\n}\r\nexport function values(obj) {\r\n    if (isObservableObject(obj)) {\r\n        return keys(obj).map(key => obj[key]);\r\n    }\r\n    if (isObservableMap(obj)) {\r\n        return keys(obj).map(key => obj.get(key));\r\n    }\r\n    if (isObservableSet(obj)) {\r\n        return Array.from(obj.values());\r\n    }\r\n    if (isObservableArray(obj)) {\r\n        return obj.slice();\r\n    }\r\n    die(6);\r\n}\r\nexport function entries(obj) {\r\n    if (isObservableObject(obj)) {\r\n        return keys(obj).map(key => [key, obj[key]]);\r\n    }\r\n    if (isObservableMap(obj)) {\r\n        return keys(obj).map(key => [key, obj.get(key)]);\r\n    }\r\n    if (isObservableSet(obj)) {\r\n        return Array.from(obj.entries());\r\n    }\r\n    if (isObservableArray(obj)) {\r\n        return obj.map((key, index) => [index, key]);\r\n    }\r\n    die(7);\r\n}\r\nexport function set(obj, key, value) {\r\n    if (arguments.length === 2 && !isObservableSet(obj)) {\r\n        startBatch();\r\n        const values = key;\r\n        try {\r\n            for (let key in values)\r\n                set(obj, key, values[key]);\r\n        }\r\n        finally {\r\n            endBatch();\r\n        }\r\n        return;\r\n    }\r\n    if (isObservableObject(obj)) {\r\n        ;\r\n        obj[$mobx].set_(key, value);\r\n    }\r\n    else if (isObservableMap(obj)) {\r\n        obj.set(key, value);\r\n    }\r\n    else if (isObservableSet(obj)) {\r\n        obj.add(key);\r\n    }\r\n    else if (isObservableArray(obj)) {\r\n        if (typeof key !== \"number\")\r\n            key = parseInt(key, 10);\r\n        if (key < 0)\r\n            die(`Invalid index: '${key}'`);\r\n        startBatch();\r\n        if (key >= obj.length)\r\n            obj.length = key + 1;\r\n        obj[key] = value;\r\n        endBatch();\r\n    }\r\n    else\r\n        die(8);\r\n}\r\nexport function remove(obj, key) {\r\n    if (isObservableObject(obj)) {\r\n        ;\r\n        obj[$mobx].delete_(key);\r\n    }\r\n    else if (isObservableMap(obj)) {\r\n        obj.delete(key);\r\n    }\r\n    else if (isObservableSet(obj)) {\r\n        obj.delete(key);\r\n    }\r\n    else if (isObservableArray(obj)) {\r\n        if (typeof key !== \"number\")\r\n            key = parseInt(key, 10);\r\n        obj.splice(key, 1);\r\n    }\r\n    else {\r\n        die(9);\r\n    }\r\n}\r\nexport function has(obj, key) {\r\n    if (isObservableObject(obj)) {\r\n        return obj[$mobx].has_(key);\r\n    }\r\n    else if (isObservableMap(obj)) {\r\n        return obj.has(key);\r\n    }\r\n    else if (isObservableSet(obj)) {\r\n        return obj.has(key);\r\n    }\r\n    else if (isObservableArray(obj)) {\r\n        return key >= 0 && key < obj.length;\r\n    }\r\n    die(10);\r\n}\r\nexport function get(obj, key) {\r\n    if (!has(obj, key))\r\n        return undefined;\r\n    if (isObservableObject(obj)) {\r\n        return obj[$mobx].get_(key);\r\n    }\r\n    else if (isObservableMap(obj)) {\r\n        return obj.get(key);\r\n    }\r\n    else if (isObservableArray(obj)) {\r\n        return obj[key];\r\n    }\r\n    die(11);\r\n}\r\n//# sourceMappingURL=object-api.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"object-api.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api/object-api.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/api/object-api.d.ts","writeByteOrderMark":false,"text":"import { IObservableArray, ObservableMap, ObservableSet } from \"../internal\";\r\nexport declare function keys<K>(map: ObservableMap<K, any>): ReadonlyArray<K>;\r\nexport declare function keys<T>(ar: IObservableArray<T>): ReadonlyArray<number>;\r\nexport declare function keys<T>(set: ObservableSet<T>): ReadonlyArray<T>;\r\nexport declare function keys<T extends Object>(obj: T): ReadonlyArray<PropertyKey>;\r\nexport declare function values<K, T>(map: ObservableMap<K, T>): ReadonlyArray<T>;\r\nexport declare function values<T>(set: ObservableSet<T>): ReadonlyArray<T>;\r\nexport declare function values<T>(ar: IObservableArray<T>): ReadonlyArray<T>;\r\nexport declare function values<T = any>(obj: T): ReadonlyArray<T extends object ? T[keyof T] : any>;\r\nexport declare function entries<K, T>(map: ObservableMap<K, T>): ReadonlyArray<[K, T]>;\r\nexport declare function entries<T>(set: ObservableSet<T>): ReadonlyArray<[T, T]>;\r\nexport declare function entries<T>(ar: IObservableArray<T>): ReadonlyArray<[number, T]>;\r\nexport declare function entries<T = any>(obj: T): ReadonlyArray<[string, T extends object ? T[keyof T] : any]>;\r\nexport declare function set<V>(obj: ObservableMap<PropertyKey, V>, values: {\r\n    [key: string]: V;\r\n}): any;\r\nexport declare function set<K, V>(obj: ObservableMap<K, V>, key: K, value: V): any;\r\nexport declare function set<T>(obj: ObservableSet<T>, value: T): any;\r\nexport declare function set<T>(obj: IObservableArray<T>, index: number, value: T): any;\r\nexport declare function set<T extends Object>(obj: T, values: {\r\n    [key: string]: any;\r\n}): any;\r\nexport declare function set<T extends Object>(obj: T, key: PropertyKey, value: any): any;\r\nexport declare function remove<K, V>(obj: ObservableMap<K, V>, key: K): any;\r\nexport declare function remove<T>(obj: ObservableSet<T>, key: T): any;\r\nexport declare function remove<T>(obj: IObservableArray<T>, index: number): any;\r\nexport declare function remove<T extends Object>(obj: T, key: string): any;\r\nexport declare function has<K>(obj: ObservableMap<K, any>, key: K): boolean;\r\nexport declare function has<T>(obj: ObservableSet<T>, key: T): boolean;\r\nexport declare function has<T>(obj: IObservableArray<T>, index: number): boolean;\r\nexport declare function has<T extends Object>(obj: T, key: string): boolean;\r\nexport declare function get<K, V>(obj: ObservableMap<K, V>, key: K): V | undefined;\r\nexport declare function get<T>(obj: IObservableArray<T>, index: number): T | undefined;\r\nexport declare function get<T extends Object>(obj: T, key: string): any;\r\n"}}

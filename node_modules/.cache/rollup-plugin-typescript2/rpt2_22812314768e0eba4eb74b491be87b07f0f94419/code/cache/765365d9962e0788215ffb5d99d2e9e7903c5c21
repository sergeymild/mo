{"code":"import { getNextId, addHiddenFinalProp, allowStateChangesStart, allowStateChangesEnd, makeIterable, addHiddenProp, ObservableArrayAdministration, $mobx, arrayExtensions, isObservableArray, defineProperty } from \"../internal\";\r\n/**\r\n * This array buffer contains two lists of properties, so that all arrays\r\n * can recycle their property definitions, which significantly improves performance of creating\r\n * properties on the fly.\r\n */\r\nlet OBSERVABLE_ARRAY_BUFFER_SIZE = 0;\r\n// Typescript workaround to make sure ObservableArray extends Array\r\nclass StubArray {\r\n}\r\nfunction inherit(ctor, proto) {\r\n    if (Object.setPrototypeOf) {\r\n        Object.setPrototypeOf(ctor.prototype, proto);\r\n    }\r\n    else if (ctor.prototype.__proto__ !== undefined) {\r\n        ctor.prototype.__proto__ = proto;\r\n    }\r\n    else {\r\n        ctor.prototype = proto;\r\n    }\r\n}\r\ninherit(StubArray, Array.prototype);\r\n// Weex proto freeze protection was here,\r\n// but it is unclear why the hack is need as MobX never changed the prototype\r\n// anyway, so removed it in V6\r\nclass LegacyObservableArray extends StubArray {\r\n    constructor(initialValues, enhancer, name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\", owned = false) {\r\n        super();\r\n        const adm = new ObservableArrayAdministration(name, enhancer, owned, true);\r\n        adm.proxy_ = this;\r\n        addHiddenFinalProp(this, $mobx, adm);\r\n        if (initialValues && initialValues.length) {\r\n            const prev = allowStateChangesStart(true);\r\n            // @ts-ignore\r\n            this.spliceWithArray(0, 0, initialValues);\r\n            allowStateChangesEnd(prev);\r\n        }\r\n    }\r\n    concat(...arrays) {\r\n        ;\r\n        this[$mobx].atom_.reportObserved();\r\n        return Array.prototype.concat.apply(this.slice(), \r\n        //@ts-ignore\r\n        arrays.map(a => (isObservableArray(a) ? a.slice() : a)));\r\n    }\r\n    get length() {\r\n        return this[$mobx].getArrayLength_();\r\n    }\r\n    set length(newLength) {\r\n        ;\r\n        this[$mobx].setArrayLength_(newLength);\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"Array\";\r\n    }\r\n    [Symbol.iterator]() {\r\n        const self = this;\r\n        let nextIndex = 0;\r\n        return makeIterable({\r\n            next() {\r\n                // @ts-ignore\r\n                return nextIndex < self.length\r\n                    ? { value: self[nextIndex++], done: false }\r\n                    : { done: true, value: undefined };\r\n            }\r\n        });\r\n    }\r\n}\r\nObject.entries(arrayExtensions).forEach(([prop, fn]) => {\r\n    if (prop !== \"concat\")\r\n        addHiddenProp(LegacyObservableArray.prototype, prop, fn);\r\n});\r\nfunction createArrayEntryDescriptor(index) {\r\n    return {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n            return this[$mobx].get_(index);\r\n        },\r\n        set: function (value) {\r\n            this[$mobx].set_(index, value);\r\n        }\r\n    };\r\n}\r\nfunction createArrayBufferItem(index) {\r\n    defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index));\r\n}\r\nexport function reserveArrayBuffer(max) {\r\n    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\r\n        for (let index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++)\r\n            createArrayBufferItem(index);\r\n        OBSERVABLE_ARRAY_BUFFER_SIZE = max;\r\n    }\r\n}\r\nreserveArrayBuffer(1000);\r\nexport function createLegacyArray(initialValues, enhancer, name) {\r\n    return new LegacyObservableArray(initialValues, enhancer, name);\r\n}\r\n//# sourceMappingURL=legacyobservablearray.js.map","references":["/Users/sergeigolishnikov/development/web/mobx/packages/mobx/src/internal.ts"],"map":"{\"version\":3,\"file\":\"legacyobservablearray.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/legacyobservablearray.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/sergeigolishnikov/development/web/mobx/packages/mobx/types/legacyobservablearray.d.ts","writeByteOrderMark":false,"text":"import { IEnhancer, IObservableArray } from \"../internal\";\r\nexport declare function reserveArrayBuffer(max: number): void;\r\nexport declare function createLegacyArray<T>(initialValues: T[] | undefined, enhancer: IEnhancer<T>, name?: string): IObservableArray<T>;\r\n"}}
